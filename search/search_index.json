{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AutoThemeGenerator AutoThemeGenerator is a package that allows you to perform thematic analysis in qualitative studies using OpenAI's GPT models. User input Users are only required to specify the folder location where their interview transcripts are stored. Accepted formats of transcripts include PDF , .docx , and .txt (prefered). AutoThemeGenerator` assumes that each document is a transcript of one interviewed participant. Files that are not formatted as such may lead to subpar results (refer to How does it work? to understand why) Output The package outputs a list of relevant themes synthesized across all interview transcripts. Themes are presented in the form of a: 1. topic sentence, 2. an explanation, 3. a relevant quote The outputs are similar to what you would expect to see in a proper qualitative analysis study. An example of an expected output is shown below: >>> print(overall_synthesized_themes) # note: output truncated for display purposes [\"**Theme 1: Understanding and Awareness of Physical Activity** - Topic Sentence: Participants exhibited a range of understandings ... ... - Explanation: Physical activity was generally understood ... ... - Quote: 'Physical activity is anything that ...' **Theme 2: Personal and Environmental Barriers to Physical Activity** - Topic Sentence: Participants identified multiple personal and situational obstacles ... ... - Explnanation: These barriers stem from personal issues like inconvenience ... ... - Quote: 'I think that a lot of people don\u2019t want to put in the effort'... ... ... ... ... ... ... ...\"] You could also view the themes for each individual transcript as follows: >>> from pprint import pprint >>> for i in range(len(individual_synthesized_themes)): >>> print(f\"\\n\\nThe themes from interviewee {i+1} is:\\n\") >>> pprint(individual_synthesized_themes[i]) # note: output truncated for display purposes The themes from interviewee 1 is: [\"Theme 1: - Topic Sentence: ... ..., - Explaination: ... ..., - Quote: ... ...] The themes from interviewee 2 is: [\"Theme 1: ... ... - Topic Sentence: ... ..., - Explaination: ... ..., - Quote: ... ...] For more details refer to documention . Requirements Required packages To use AutoThemeGenerator , you are required to have the following packages installed: - openai - docx - tqdm - nltk - nltk.tokenize (submodule of nltk ) - python-docx - textract - requests - zipfile (Python standard library) - shutil (Python standard library) - json (Python standard library) - pprint (Python standard library) If you do not have those packages installed in python, you can do the following: pip install openai==1.12.0 python-docx docx tqdm nltk textract requests OpenAI API key You also need an OpenAI key to be able to use this package. If you do not have one, you can apply for an OpenAI API key at platform.openai.com/api-keys . pip version The package could only be installed with version older than 24.1 . Newer versions of pip will not work due to compatability issues with textract . To downgrade to a version older than 24.1 , please do the following: pip install \"pip<24.1\" Installation To install in python, simply do the following: pip install AutoThemeGenerator Quick Start Here we provide a quick example on how you can execute GPT4QualitativeAnalysis to conveniently perform qualitative analysis from your transcript. For details towards each of the package's functions and parameters, refer to the documention . from AutoThemeGenerator import * # specify the context of your study context = ( \"Physical inactivity is a major risk factor for developing several chronic illness. \" \"However, university students and staff in the UK are found to be more physically inactive \" \"compared the general UK population. \" ) # specify your research questions research_questions = ( \"This study seeks to understand the barriers and enablers \" \"of physical activity (PA) among university staff and students in \" \"the UK under the university setting, using the Theoretical \" \"Domain Framework (TDF) to guide the investigation. \" ) # specify your survey script survey_script = ( \"Knowledge\\n \" \"What do you know about physical activity? How might you define physical activity? \" \"... ...\" # note: truncated to save space \"... ...\" ) # Specify the folders containing your transcript directory_path = \"my_transcript_folder\" # specify your OpenAI API key api_key = \"<insert your API key>\" # specify the folder you wish to save your themes. save_results_path = \"folder_of_my_saved_results\" # Analyze and synthesize transcripts initial_themes, individual_synthesized_themes, overall_synthesized_themes = \\ analyze_and_synthesize_transcripts( directory_path = directory_path, context = context, research_questions = research_questions, script = survey_script, api_key = api_key, save_results_path = save_results_path) # display your study-level themes print(overall_synthesized_themes) You can now view the themes in the form of a topic sentence, a detailed explaination and a relevant quote How does it work? 1. Chunking Transcripts are chunked into sizeable bits to fit into GPT-4's context window 2. Extracting relevant themes Background information is provided to the GPT model. These include the context, research question and survey script. Themes are then identified at a chunk-level. 3. Synthesizing themes at a participant level Chunk level themes are then synthesized at a participant-level. 4. Synthesizing themes to a study-level Participant-level themes are then synthesized at a study-level. For each study, the package returns a topic sentence of the theme, an explaination of the theme, and a supporting relevant quote from the transcript. Citation Yuyi Yang, Charles Alba, Chenyu Wang, Xi Wang, Jami Anderson, and Ruopeng An. \"GPT Models Can Perform Thematic Analysis in Public Health Studies, Akin to Qualitative Researchers.\" Journal of Social Computing, vol. 5, no. 4, (2024): 293-312. doi: 10.23919/JSC.2024.0024 Questions? Contact me at alba@wustl.edu","title":"Home"},{"location":"#autothemegenerator","text":"AutoThemeGenerator is a package that allows you to perform thematic analysis in qualitative studies using OpenAI's GPT models.","title":"AutoThemeGenerator"},{"location":"#user-input","text":"Users are only required to specify the folder location where their interview transcripts are stored. Accepted formats of transcripts include PDF , .docx , and .txt (prefered). AutoThemeGenerator` assumes that each document is a transcript of one interviewed participant. Files that are not formatted as such may lead to subpar results (refer to How does it work? to understand why)","title":"User input"},{"location":"#output","text":"The package outputs a list of relevant themes synthesized across all interview transcripts. Themes are presented in the form of a: 1. topic sentence, 2. an explanation, 3. a relevant quote The outputs are similar to what you would expect to see in a proper qualitative analysis study. An example of an expected output is shown below: >>> print(overall_synthesized_themes) # note: output truncated for display purposes [\"**Theme 1: Understanding and Awareness of Physical Activity** - Topic Sentence: Participants exhibited a range of understandings ... ... - Explanation: Physical activity was generally understood ... ... - Quote: 'Physical activity is anything that ...' **Theme 2: Personal and Environmental Barriers to Physical Activity** - Topic Sentence: Participants identified multiple personal and situational obstacles ... ... - Explnanation: These barriers stem from personal issues like inconvenience ... ... - Quote: 'I think that a lot of people don\u2019t want to put in the effort'... ... ... ... ... ... ... ...\"] You could also view the themes for each individual transcript as follows: >>> from pprint import pprint >>> for i in range(len(individual_synthesized_themes)): >>> print(f\"\\n\\nThe themes from interviewee {i+1} is:\\n\") >>> pprint(individual_synthesized_themes[i]) # note: output truncated for display purposes The themes from interviewee 1 is: [\"Theme 1: - Topic Sentence: ... ..., - Explaination: ... ..., - Quote: ... ...] The themes from interviewee 2 is: [\"Theme 1: ... ... - Topic Sentence: ... ..., - Explaination: ... ..., - Quote: ... ...] For more details refer to documention .","title":"Output"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#required-packages","text":"To use AutoThemeGenerator , you are required to have the following packages installed: - openai - docx - tqdm - nltk - nltk.tokenize (submodule of nltk ) - python-docx - textract - requests - zipfile (Python standard library) - shutil (Python standard library) - json (Python standard library) - pprint (Python standard library) If you do not have those packages installed in python, you can do the following: pip install openai==1.12.0 python-docx docx tqdm nltk textract requests","title":"Required packages"},{"location":"#openai-api-key","text":"You also need an OpenAI key to be able to use this package. If you do not have one, you can apply for an OpenAI API key at platform.openai.com/api-keys .","title":"OpenAI API key"},{"location":"#pip-version","text":"The package could only be installed with version older than 24.1 . Newer versions of pip will not work due to compatability issues with textract . To downgrade to a version older than 24.1 , please do the following: pip install \"pip<24.1\"","title":"pip version"},{"location":"#installation","text":"To install in python, simply do the following: pip install AutoThemeGenerator","title":"Installation"},{"location":"#quick-start","text":"Here we provide a quick example on how you can execute GPT4QualitativeAnalysis to conveniently perform qualitative analysis from your transcript. For details towards each of the package's functions and parameters, refer to the documention . from AutoThemeGenerator import * # specify the context of your study context = ( \"Physical inactivity is a major risk factor for developing several chronic illness. \" \"However, university students and staff in the UK are found to be more physically inactive \" \"compared the general UK population. \" ) # specify your research questions research_questions = ( \"This study seeks to understand the barriers and enablers \" \"of physical activity (PA) among university staff and students in \" \"the UK under the university setting, using the Theoretical \" \"Domain Framework (TDF) to guide the investigation. \" ) # specify your survey script survey_script = ( \"Knowledge\\n \" \"What do you know about physical activity? How might you define physical activity? \" \"... ...\" # note: truncated to save space \"... ...\" ) # Specify the folders containing your transcript directory_path = \"my_transcript_folder\" # specify your OpenAI API key api_key = \"<insert your API key>\" # specify the folder you wish to save your themes. save_results_path = \"folder_of_my_saved_results\" # Analyze and synthesize transcripts initial_themes, individual_synthesized_themes, overall_synthesized_themes = \\ analyze_and_synthesize_transcripts( directory_path = directory_path, context = context, research_questions = research_questions, script = survey_script, api_key = api_key, save_results_path = save_results_path) # display your study-level themes print(overall_synthesized_themes) You can now view the themes in the form of a topic sentence, a detailed explaination and a relevant quote","title":"Quick Start"},{"location":"#how-does-it-work","text":"","title":"How does it work?"},{"location":"#1-chunking","text":"Transcripts are chunked into sizeable bits to fit into GPT-4's context window","title":"1. Chunking"},{"location":"#2-extracting-relevant-themes","text":"Background information is provided to the GPT model. These include the context, research question and survey script. Themes are then identified at a chunk-level.","title":"2. Extracting relevant themes"},{"location":"#3-synthesizing-themes-at-a-participant-level","text":"Chunk level themes are then synthesized at a participant-level.","title":"3. Synthesizing themes at a participant level"},{"location":"#4-synthesizing-themes-to-a-study-level","text":"Participant-level themes are then synthesized at a study-level. For each study, the package returns a topic sentence of the theme, an explaination of the theme, and a supporting relevant quote from the transcript.","title":"4. Synthesizing themes to a study-level"},{"location":"#citation","text":"Yuyi Yang, Charles Alba, Chenyu Wang, Xi Wang, Jami Anderson, and Ruopeng An. \"GPT Models Can Perform Thematic Analysis in Public Health Studies, Akin to Qualitative Researchers.\" Journal of Social Computing, vol. 5, no. 4, (2024): 293-312. doi: 10.23919/JSC.2024.0024","title":"Citation"},{"location":"#questions","text":"Contact me at alba@wustl.edu","title":"Questions?"},{"location":"documention/","text":"analyze_and_synthesize_transcripts AutoThemeGenerator. analyze_and_synthesize_transcripts ( *, directory_path, context, research_questions, script, api_key, save_results_path ) Function that analyzes transcripts, chunks them into manageable sizes, and synthesizes them into individual themes before syntheszing them into overarching study themes using an OpenAI GPT model. For more details, refer to How does it work? Parameters directory_path ( str ): The folder path in which the transcripts are located. Folder should contain either .txt , .docx , or .pdf files. context ( str ): Context of the overall study research_questions ( str ): Research questions of the study script ( str ): Script used in interviews or focus groups. api_key ( str ): OpenAI API key. For more details, refer to platform.openai.com/api-keys save_results_path ( str ): The path where the results will be saved, themes_per_person.json and themes_overall.json . model ( str, optional ): The model to be used for completion. For a list of possible models, refer to platform.openai.com/docs/models . Defaults to gpt-4 . max_tokens_chunk ( int, optional ): The maximum number of tokens in each transcript segment. Defaults to 2500. overlap_tokens ( int, optional ): The number of tokens that overlap between two consecutive transcript segments. Defaults to 100. max_tokens_transcript ( int, optional ): The maximum length of the generated text from a transcript segment. Defaults to 1000. max_tokens_combine_ind_themes ( int, optional ): Maximum token length for combining an single participant's themes. Defaults to 5000. max_tokens_gen_ind_themes ( int, optional ): Maximum tokens for generating themes from a chunk of combined themes from a single participant. Defaults to 1000 max_tokens_combine_all_themes ( int, optional ): Maximum token length for combining themes from all participants. Defaults to 4000. max_tokens_gen_all_themes ( int, optional ): Maximum tokens for generating themes from all participants (each individual has a single chunck of themes). Defaults to 2000. Returns Your chunk-level themes , participant-level synthesized themes & study-level synthesized themes each as a list of lists: A list where each sublist contains a synthesized chunk of overall study themes. For more details, refer to How does it work? Example from AutoThemeGenerator import analyze_and_synthesize_transcripts # specify the context of your study context = ( \"Physical inactivity is a major risk factor for developing several chronic illness. \" \"However, university students and staff in the UK are found to be more physically inactive \" \"compared the general UK population. \" ) # specify your research questions research_questions = ( \"This study seeks to understand the barriers and enablers \" \"of physical activity (PA) among university staff and students in \" \"the UK under the university setting, using the Theoretical \" \"Domain Framework (TDF) to guide the investigation. \" ) # specify your survey script survey_script = ( \"Knowledge\\n \" \"What do you know about physical activity? How might you define physical activity? \" \"... ...\" # note: truncated to save space \"... ...\" ) # Specify the folders containing your transcript directory_path = \"my_transcript_folder\" # specify your OpenAI API key api_key = \"<insert your API key>\" # specify the folder you wish to save your themes. save_results_path = \"folder_of_my_saved_results\" # Analyze and synthesize transcripts initial_themes, individual_synthesized_themes, overall_synthesized_themes = \\ analyze_and_synthesize_transcripts( directory_path = directory_path, context = context, research_questions = research_questions, script = survey_script, api_key = api_key, save_results_path = save_results_path) # display your study-level themes print(overall_synthesized_themes) download_example AutoThemeGenerator. download_example (*) Function to download example transcripts from a url. Used primarily for ease of demonstration in our demonstrated examples . Parameters folder_name ( str, optional ): Name of folder where the example transcripts will be contained in exisiting directory. Defaults to example_transcripts . url ( str, optional ): download url of the transcripts, should end in .zip format. Defaults to downloading an .zip transcripts from Henderson et al's (2020) study. Example >>> from AutoThemeGenerator import download_example >>> download_example() load_results_from_json AutoThemeGenerator. load_results_from_json (*, file_path) Loads the themes which were extracted from the analyzed transcripts that are saved as a JSON file. Parameters file_path (str): The path where the JSON file is located. Returns: list: The loaded analysis results. Example from AutoThemeGenerator import load_results_from_json # specify the folder where you saved your themes. save_results_path = \"folder_of_my_saved_results\" # Load the synthesized results overall_synthesized_themes = load_results_from_json( os.path.join(save_results_path, \"themes_overall.json\")) print(overall_synthesized_themes)","title":"Documentation"},{"location":"documention/#_1","text":"","title":""},{"location":"documention/#analyze_and_synthesize_transcripts","text":"AutoThemeGenerator. analyze_and_synthesize_transcripts ( *, directory_path, context, research_questions, script, api_key, save_results_path ) Function that analyzes transcripts, chunks them into manageable sizes, and synthesizes them into individual themes before syntheszing them into overarching study themes using an OpenAI GPT model. For more details, refer to How does it work?","title":"analyze_and_synthesize_transcripts"},{"location":"documention/#parameters","text":"directory_path ( str ): The folder path in which the transcripts are located. Folder should contain either .txt , .docx , or .pdf files. context ( str ): Context of the overall study research_questions ( str ): Research questions of the study script ( str ): Script used in interviews or focus groups. api_key ( str ): OpenAI API key. For more details, refer to platform.openai.com/api-keys save_results_path ( str ): The path where the results will be saved, themes_per_person.json and themes_overall.json . model ( str, optional ): The model to be used for completion. For a list of possible models, refer to platform.openai.com/docs/models . Defaults to gpt-4 . max_tokens_chunk ( int, optional ): The maximum number of tokens in each transcript segment. Defaults to 2500. overlap_tokens ( int, optional ): The number of tokens that overlap between two consecutive transcript segments. Defaults to 100. max_tokens_transcript ( int, optional ): The maximum length of the generated text from a transcript segment. Defaults to 1000. max_tokens_combine_ind_themes ( int, optional ): Maximum token length for combining an single participant's themes. Defaults to 5000. max_tokens_gen_ind_themes ( int, optional ): Maximum tokens for generating themes from a chunk of combined themes from a single participant. Defaults to 1000 max_tokens_combine_all_themes ( int, optional ): Maximum token length for combining themes from all participants. Defaults to 4000. max_tokens_gen_all_themes ( int, optional ): Maximum tokens for generating themes from all participants (each individual has a single chunck of themes). Defaults to 2000.","title":"Parameters"},{"location":"documention/#returns","text":"Your chunk-level themes , participant-level synthesized themes & study-level synthesized themes each as a list of lists: A list where each sublist contains a synthesized chunk of overall study themes. For more details, refer to How does it work?","title":"Returns"},{"location":"documention/#example","text":"from AutoThemeGenerator import analyze_and_synthesize_transcripts # specify the context of your study context = ( \"Physical inactivity is a major risk factor for developing several chronic illness. \" \"However, university students and staff in the UK are found to be more physically inactive \" \"compared the general UK population. \" ) # specify your research questions research_questions = ( \"This study seeks to understand the barriers and enablers \" \"of physical activity (PA) among university staff and students in \" \"the UK under the university setting, using the Theoretical \" \"Domain Framework (TDF) to guide the investigation. \" ) # specify your survey script survey_script = ( \"Knowledge\\n \" \"What do you know about physical activity? How might you define physical activity? \" \"... ...\" # note: truncated to save space \"... ...\" ) # Specify the folders containing your transcript directory_path = \"my_transcript_folder\" # specify your OpenAI API key api_key = \"<insert your API key>\" # specify the folder you wish to save your themes. save_results_path = \"folder_of_my_saved_results\" # Analyze and synthesize transcripts initial_themes, individual_synthesized_themes, overall_synthesized_themes = \\ analyze_and_synthesize_transcripts( directory_path = directory_path, context = context, research_questions = research_questions, script = survey_script, api_key = api_key, save_results_path = save_results_path) # display your study-level themes print(overall_synthesized_themes)","title":"Example"},{"location":"documention/#download_example","text":"AutoThemeGenerator. download_example (*) Function to download example transcripts from a url. Used primarily for ease of demonstration in our demonstrated examples .","title":"download_example"},{"location":"documention/#parameters_1","text":"folder_name ( str, optional ): Name of folder where the example transcripts will be contained in exisiting directory. Defaults to example_transcripts . url ( str, optional ): download url of the transcripts, should end in .zip format. Defaults to downloading an .zip transcripts from Henderson et al's (2020) study.","title":"Parameters"},{"location":"documention/#example_1","text":">>> from AutoThemeGenerator import download_example >>> download_example()","title":"Example"},{"location":"documention/#load_results_from_json","text":"AutoThemeGenerator. load_results_from_json (*, file_path) Loads the themes which were extracted from the analyzed transcripts that are saved as a JSON file.","title":"load_results_from_json"},{"location":"documention/#parameters_2","text":"file_path (str): The path where the JSON file is located.","title":"Parameters"},{"location":"documention/#returns_1","text":"list: The loaded analysis results.","title":"Returns:"},{"location":"documention/#example_2","text":"from AutoThemeGenerator import load_results_from_json # specify the folder where you saved your themes. save_results_path = \"folder_of_my_saved_results\" # Load the synthesized results overall_synthesized_themes = load_results_from_json( os.path.join(save_results_path, \"themes_overall.json\")) print(overall_synthesized_themes)","title":"Example"},{"location":"examples/","text":"","title":"Examples"}]}